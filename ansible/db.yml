- hosts: localhost
  connection: local
  become: yes

  vars:
    docker_prj: /root/docker-postgres
    postgres_data: /opt/docker-postgres

  tasks:
    - name: EDITOR を vim にする
      lineinfile:
        path: '{{ ansible_env.HOME }}/.bashrc'
        regexp: ^export\s+EDITOR=
        line: export EDITOR=vim

    - package: 'name={{ item }} state=present'
      with_items:
        - ssl-cert # SSL接続のために必要
        - postgresql-client
        - language-pack-ja-base
        - language-pack-ja
        - manpages-ja
        - manpages-ja-dev

    - name: システムの文字セットを日本語にする
      shell: localectl set-locale LANG=ja_JP.UTF-8 LANGUAGE="ja_JP:ja"
      when: "'ja_JP.UTF-8' != lookup('env','LANG')"

    - name: タイムゾーンを東京標準時にする_1
      file:
        state: link
        path: /etc/localtime
        src: /usr/share/zoneinfo/Asia/Tokyo
      register: tz

    - name: タイムゾーンを東京標準時にする_2
      shell: dpkg-reconfigure -f noninteractive tzdata
      when: tz.changed

    - name: 'SSHのポート番号を{{ ssh_port }}にする'
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: ^Port\s+[0-9]+$
        line: 'Port {{ ssh_port }}'
      register: sshPort

    - name: SSHのポート番号を変更した場合は即リロードさせる
      when: sshPort.changed
      service: name=ssh state=restarted

    - name: docker-composeをインストールする
      package: name=docker-compose state=present

    - name: Dockerを自動起動にする
      service: name=docker.service enabled=yes

    - name: docker-compose用のプロジェクトディレクトリを作る
      file:
        path: '{{ docker_prj }}'
        state: directory
        mode: 0600
        owner: root
        group: root

    - name: docker-compose.ymlを修正する
      template:
        src: '{{ playbook_dir }}/docker-compose.yml.j2'
        dest: '{{ docker_prj }}/docker-compose.yml'

    - docker_service:
        project_name: postgres
        project_src: '{{ docker_prj }}'

    - name: PostgreSQLコンテナの初期化を待つ
      shell: |
        for i in $(seq 1 60); do
          psql_out=$(psql -At postgres://{{ db_user }}:{{ db_password }}@localhost:{{ db_port }}/ -c 'SELECT 1')
          if [ "$psql_out" = "1" ]; then exit 0; fi
          sleep 1
        done
        exit 1
      changed_when: false

    - copy:
        dest: '{{ item.dest }}'
        src: '{{ item.src }}'
        mode: 0600
        remote_src: yes
      with_items:
        - dest: '{{ postgres_data }}/server.key'
          src: /etc/ssl/private/ssl-cert-snakeoil.key
        - dest: '{{ postgres_data }}/server.crt'
          src: /etc/ssl/certs/ssl-cert-snakeoil.pem

    - name: SSL接続設定を有効にする
      lineinfile:
        path: '{{ postgres_data }}/postgresql.conf'
        regexp: ^ssl\s+=
        line: ssl = on
      register: enableSsl

    - name: PostgreSQLへの接続をSSLに限定する
      lineinfile:
        path: '{{ postgres_data }}/pg_hba.conf'
        regexp: ^host(ssl)?\s+all\s+all\s+all\s+
        line: hostssl all all all md5
      register: sslOnly

    - name: SSL接続設定を変更した場合はコンテナをリロードする
      docker_service:
        project_name: postgres
        project_src: '{{ docker_prj }}'
        restarted: yes
      when: enableSsl.changed or sslOnly.changed

    - name: PostgreSQLのタイムゾーンを確認する
      shell: >-
        psql postgres://{{ db_user }}:{{ db_password }}@localhost:{{ db_port }}/
        --tuples-only --no-align -c 'show timezone'
      register: pgTz
      changed_when: false

    - name: PostgreSQLのタイムゾーンを東京標準時にする
      shell: >-
        psql postgres://{{ db_user }}:{{ db_password }}@localhost:{{ db_port }}/
        -c "{{ item }}"
      with_items:
        - "ALTER DATABASE {{ db_user }} SET timezone TO 'Asia/Tokyo'"
        - ALTER DATABASE template1 SET timezone TO 'Asia/Tokyo'
        - ALTER DATABASE template0 SET timezone TO 'Asia/Tokyo'
        - SELECT pg_reload_conf()
      when: "'Asia/Tokyo' != pgTz.stdout"
